#!/bin/bash

set -e

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
XRAY_PATH="/usr/local/bin/xray"
XRAY_CONFIG="/etc/xray/config.json"
XRAY_SERVICE="/etc/systemd/system/xray.service"
PORT=443
MASK_DOMAIN="www.google.com"
ALPN="h2"
FLOW="xtls-rprx-vision"
QR_PATH="/tmp/vless_qr.png"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ifconfig.me)
get_public_ip() {
    curl -s https://ifconfig.me
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
detect_main_interface() {
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    ip route show default | awk '{print $5}' | head -n1
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
detect_network_manager() {
    if systemctl is-active --quiet NetworkManager 2>/dev/null; then
        echo "NetworkManager"
    elif systemctl is-active --quiet systemd-networkd 2>/dev/null; then
        echo "systemd-networkd"
    elif [ -d /etc/netplan ] && ls /etc/netplan/*.yaml >/dev/null 2>&1; then
        echo "netplan"
    elif [ -f /etc/cloud/cloud.cfg.d/50-curtin-networking.cfg ] || [ -f /var/lib/cloud/instance/network-config ]; then
        echo "cloud-init"
    else
        echo "unknown"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
configure_mtu() {
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏..."
    
    local main_interface
    main_interface=$(detect_main_interface)
    
    if [ -z "$main_interface" ]; then
        echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        echo "‚ÑπÔ∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MTU 1400 –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
        return 1
    fi
    
    echo "üì° –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $main_interface"
    
    local network_manager
    network_manager=$(detect_network_manager)
    echo "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–µ—Ç–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä: $network_manager"
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MTU –¥–ª—è Reality
    local safe_mtu=1400
    
    case "$network_manager" in
        "NetworkManager")
            echo "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU —á–µ—Ä–µ–∑ NetworkManager..."
            if command -v nmcli >/dev/null 2>&1; then
                nmcli connection modify "$(nmcli -t -f NAME,DEVICE connection show --active | grep "$main_interface" | cut -d: -f1)" ethernet.mtu "$safe_mtu" 2>/dev/null || {
                    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å MTU —á–µ—Ä–µ–∑ NetworkManager"
                    echo "‚ÑπÔ∏è  –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: nmcli connection modify <connection-name> ethernet.mtu $safe_mtu"
                    return 1
                }
                echo "‚úÖ MTU —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $safe_mtu —á–µ—Ä–µ–∑ NetworkManager"
            else
                echo "‚ö†Ô∏è  nmcli –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"
                return 1
            fi
            ;;
        "systemd-networkd")
            echo "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU —á–µ—Ä–µ–∑ systemd-networkd..."
            local network_file="/etc/systemd/network/50-$main_interface.network"
            if [ -f "$network_file" ]; then
                if ! grep -q "MTU=" "$network_file"; then
                    sed -i '/\[Link\]/a MTU='$safe_mtu "$network_file" 2>/dev/null || {
                        echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å MTU"
                        echo "‚ÑπÔ∏è  –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª $network_file –≤ —Å–µ–∫—Ü–∏—é [Link]: MTU=$safe_mtu"
                        return 1
                    }
                    echo "‚úÖ MTU —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $safe_mtu –≤ $network_file"
                    systemctl restart systemd-networkd
                else
                    echo "‚ÑπÔ∏è  MTU —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ $network_file"
                fi
            else
                echo "‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $network_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
                echo "‚ÑπÔ∏è  –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π MTU=$safe_mtu –≤ —Å–µ–∫—Ü–∏–∏ [Link]"
                return 1
            fi
            ;;
        "netplan")
            echo "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU —á–µ—Ä–µ–∑ netplan..."
            echo "‚ö†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MTU —á–µ—Ä–µ–∑ netplan —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
            echo "‚ÑπÔ∏è  –î–æ–±–∞–≤—å—Ç–µ –≤ –≤–∞—à —Ñ–∞–π–ª /etc/netplan/*.yaml:"
            echo "      $main_interface:"
            echo "        mtu: $safe_mtu"
            echo "‚ÑπÔ∏è  –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo netplan apply"
            return 1
            ;;
        "cloud-init")
            echo "üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω cloud-init..."
            echo "‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU –≤ cloud-init –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞"
            echo "‚ÑπÔ∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å MTU=$safe_mtu —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"
            echo "‚ÑπÔ∏è  –ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ cloud-init –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            return 1
            ;;
        *)
            echo "‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä"
            echo "‚ÑπÔ∏è  –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ ip –∫–æ–º–∞–Ω–¥—É..."
            if command -v ip >/dev/null 2>&1; then
                if ip link set dev "$main_interface" mtu "$safe_mtu" 2>/dev/null; then
                    echo "‚úÖ MTU –≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ $safe_mtu"
                    echo "‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥"
                else
                    echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MTU"
                    echo "‚ÑπÔ∏è  –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: ip link set dev $main_interface mtu $safe_mtu"
                    return 1
                fi
            else
                echo "‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ip –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞"
                return 1
            fi
            ;;
    esac
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è UUID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_uuid_exists() {
    local uuid="$1"
    if [ -f "$XRAY_CONFIG" ]; then
        jq -e --arg uuid "$uuid" '.inbounds[0].settings.clients[] | select(.id == $uuid)' "$XRAY_CONFIG" >/dev/null 2>&1
    else
        return 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    apt update
    echo "‚¨áÔ∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: curl, wget, jq, qrencode, socat, unzip..."
    apt install -y curl wget jq qrencode socat unzip
    echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray-core, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
install_xray() {
    if [ ! -f "$XRAY_PATH" ]; then
        echo "‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Xray-core —Å GitHub..."
        wget -O /tmp/xray.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
        echo "üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ Xray..."
        unzip /tmp/xray.zip -d /tmp/xray
        echo "üìÅ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Xray..."
        install -m 755 /tmp/xray/xray "$XRAY_PATH"
        mkdir -p /etc/xray
        rm -rf /tmp/xray /tmp/xray.zip
        echo "‚úÖ Xray-core —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ÑπÔ∏è  Xray-core —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è Reality (x25519), –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
generate_keys() {
    if [ ! -f /etc/xray/private.key ] || [ ! -f /etc/xray/public.key ]; then
        echo "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π Reality (x25519)..."
        "$XRAY_PATH" x25519 > /tmp/keys.txt
        PRIVATE_KEY=$(grep 'Private' /tmp/keys.txt | awk '{print $3}')
        PUBLIC_KEY=$(grep 'Public' /tmp/keys.txt | awk '{print $3}')
        echo "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞..."
        echo "$PRIVATE_KEY" > /etc/xray/private.key
        echo "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞..."
        echo "$PUBLIC_KEY" > /etc/xray/public.key
        rm /tmp/keys.txt
        echo "‚úÖ –ö–ª—é—á–∏ Reality —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
    else
        echo "‚ÑπÔ∏è  –ö–ª—é—á–∏ Reality —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ Xray (—Ç–æ–ª—å–∫–æ —Å 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
create_config() {
    UUID="$1"
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray —Å UUID: $UUID"
    PRIVATE_KEY=$(cat /etc/xray/private.key)
    SHORT_ID=$(openssl rand -hex 8)
    echo "üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Short ID: $SHORT_ID"
    cat > "$XRAY_CONFIG" <<EOF
{
  "log": { "access": "/var/log/xray/access.log", "error": "/var/log/xray/error.log", "loglevel": "warning" },
  "inbounds": [{
    "port": $PORT,
    "protocol": "vless",
    "settings": {
      "clients": [
        {
          "id": "$UUID",
          "flow": "$FLOW"
        }
      ],
      "decryption": "none",
      "fallbacks": []
    },
    "streamSettings": {
      "network": "tcp",
      "security": "reality",
      "realitySettings": {
        "show": false,
        "dest": "$MASK_DOMAIN:443",
        "xver": 0,
        "serverNames": ["$MASK_DOMAIN"],
        "privateKey": "$PRIVATE_KEY",
        "shortIds": ["$SHORT_ID"],
        "maxClient": 8
      }
    }
  }],
  "outbounds": [{ "protocol": "freedom", "settings": {} }]
}
EOF
    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Xray —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UUID) –≤ clients –≤ –∫–æ–Ω—Ñ–∏–≥–µ
add_user() {
    UUID="$1"
    echo "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å UUID: $UUID"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ UUID
    if check_uuid_exists "$UUID"; then
        echo "‚ö†Ô∏è  UUID $UUID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!"
        echo "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID..."
        UUID=$(cat /proc/sys/kernel/random/uuid)
        echo "üÜï –ù–æ–≤—ã–π UUID: $UUID"
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
        while check_uuid_exists "$UUID"; do
            echo "üîÑ UUID –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ—â—ë —Ä–∞–∑..."
            UUID=$(cat /proc/sys/kernel/random/uuid)
            echo "üÜï –ù–æ–≤—ã–π UUID: $UUID"
        done
    fi
    
    echo "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ UUID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    jq --arg uuid "$UUID" \
       --arg flow "$FLOW" \
       '.inbounds[0].settings.clients += [{"id":$uuid,"flow":$flow}]' "$XRAY_CONFIG" > /tmp/config_new.json
    mv /tmp/config_new.json "$XRAY_CONFIG"
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π UUID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main
    echo "$UUID"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã Xray
restart_xray() {
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã Xray..."
    echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤..."
    mkdir -p /var/log/xray
    chown nobody:nogroup /var/log/xray 2>/dev/null || chown root:root /var/log/xray
    chmod 755 /var/log/xray

    echo "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ systemd..."
    systemctl daemon-reload
    echo "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã Xray..."
    systemctl restart xray
    echo "‚úÖ –°–ª—É–∂–±–∞ Xray —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ Xray –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
setup_service() {
    if [ ! -f "$XRAY_SERVICE" ]; then
        echo "‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Xray..."
        cat > "$XRAY_SERVICE" <<EOF
[Unit]
Description=Xray Service
After=network.target nss-lookup.target

[Service]
User=root
ExecStart=$XRAY_PATH run -c $XRAY_CONFIG
Restart=on-failure
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF
        echo "üîß –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã..."
        systemctl enable xray
        echo "‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á—ë–Ω"
    else
        echo "‚ÑπÔ∏è  Systemd —Å–µ—Ä–≤–∏—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VLESS-—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ Reality)
generate_vless_link() {
    UUID="$1"
    echo "üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VLESS-—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
    PUBLIC_KEY=$(cat /etc/xray/public.key)
    SHORT_ID=$(jq -r '.inbounds[0].streamSettings.realitySettings.shortIds[0]' "$XRAY_CONFIG")
    echo "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    SERVER_IP=$(get_public_ip)
    echo "üì° IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"
    VLESS_LINK="vless://$UUID@$SERVER_IP:$PORT?encryption=none&security=reality&type=tcp&flow=$FLOW&sni=$MASK_DOMAIN&fp=chrome&alpn=$ALPN&pbk=$PUBLIC_KEY&sid=$SHORT_ID#VLESS-Reality"
    echo "‚úÖ VLESS-—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"
    echo "$VLESS_LINK"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ VLESS
generate_qr() {
    echo "üì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
    qrencode -o "$QR_PATH" "$VLESS_LINK"
    echo "üíæ QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $QR_PATH"
    echo
    echo "üì± QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å —ç–∫—Ä–∞–Ω–∞):"
    echo "$VLESS_LINK" | qrencode -t ANSIUTF8
    echo
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
main() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VLESS Reality..."
    echo "=================================================="
    
    install_dependencies
    install_xray
    generate_keys
    setup_service
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU
    configure_mtu || echo "‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MTU –ø—Ä–æ–ø—É—â–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."

    if [ ! -f "$XRAY_CONFIG" ]; then
        echo ""
        echo "üéâ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥..."
        UUID=$(cat /proc/sys/kernel/random/uuid)
        create_config "$UUID"
        restart_xray
        echo ""
        echo "üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
        VLESS_LINK=$(generate_vless_link "$UUID")
        echo ""
        echo "üéØ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
        echo "$VLESS_LINK"
        echo ""
        generate_qr "$VLESS_LINK"
        echo "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    else
        echo ""
        echo "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
        UUID=$(cat /proc/sys/kernel/random/uuid)
        FINAL_UUID=$(add_user "$UUID")
        restart_xray
        echo ""
        echo "üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
        VLESS_LINK=$(generate_vless_link "$FINAL_UUID")
        echo ""
        echo "üéØ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
        echo "$VLESS_LINK"
        echo ""
        generate_qr "$VLESS_LINK"
        echo "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
    fi
    
    echo ""
    echo "=================================================="
    echo "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!"
}

main
